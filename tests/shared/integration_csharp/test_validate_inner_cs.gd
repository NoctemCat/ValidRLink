extends RLinkTestBaseCSharp


func test_validate_recursion() -> void:
    var node: Node = _get_structure()
    
    var data := rlink_data_cache.get_data(node)
    data.validate_changes("")
    assert_eq(node.Inner1.IntVar, 100)
    assert_eq(node.Inner1.Inner1.IntVar, 200)
    assert_eq(node.Inner1.Inner1.Inner.IntVar, int())
    assert_eq(node.Inner1.Inner2.IntVar, 200)
    assert_eq(node.Inner1.Inner2.Inner.IntVar, int())
    assert_eq(node.Inner1.Inner3.IntVar, 200)
    assert_eq(node.Inner1.Inner3.Inner.IntVar, int())
    assert_eq(node.Inner2.IntVar, 100)
    assert_eq(node.Inner2.Inner1.IntVar, 200)
    assert_eq(node.Inner2.Inner1.Inner.IntVar, int())
    assert_eq(node.Inner2.Inner2.IntVar, 200)
    assert_eq(node.Inner2.Inner2.Inner.IntVar, int())
    assert_eq(node.Inner2.Inner3.IntVar, 200)
    assert_eq(node.Inner2.Inner3.Inner.IntVar, int())
    assert_eq(node.Inner3.IntVar, 100)
    assert_eq(node.Inner3.Inner1.IntVar, 200)
    assert_eq(node.Inner3.Inner1.Inner.IntVar, int())
    assert_eq(node.Inner3.Inner2.IntVar, 200)
    assert_eq(node.Inner3.Inner2.Inner.IntVar, int())
    assert_eq(node.Inner3.Inner3.IntVar, 200)
    assert_eq(node.Inner3.Inner3.Inner.IntVar, int())


func test_validate_exception() -> void:
    var node: Node = _get_structure()
    
    var data := rlink_data_cache.get_data(node)
    var data_inner := rlink_data_cache.get_data(node.Inner1)
    data.add_validate_exception(data_inner.tool_obj.get_instance_id())
    
    data.validate_changes("")
    assert_eq(node.Inner1.IntVar, int())
    assert_eq(node.Inner1.Inner1.IntVar, int())
    assert_eq(node.Inner1.Inner1.Inner.IntVar, int())
    assert_eq(node.Inner1.Inner2.IntVar, int())
    assert_eq(node.Inner1.Inner2.Inner.IntVar, int())
    assert_eq(node.Inner1.Inner3.IntVar, int())
    assert_eq(node.Inner1.Inner3.Inner.IntVar, int())
    assert_eq(node.Inner2.IntVar, 100)
    assert_eq(node.Inner2.Inner1.IntVar, 200)
    assert_eq(node.Inner2.Inner1.Inner.IntVar, int())
    assert_eq(node.Inner2.Inner2.IntVar, 200)
    assert_eq(node.Inner2.Inner2.Inner.IntVar, int())
    assert_eq(node.Inner2.Inner3.IntVar, 200)
    assert_eq(node.Inner2.Inner3.Inner.IntVar, int())
    assert_eq(node.Inner3.IntVar, 100)
    assert_eq(node.Inner3.Inner1.IntVar, 200)
    assert_eq(node.Inner3.Inner1.Inner.IntVar, int())
    assert_eq(node.Inner3.Inner2.IntVar, 200)
    assert_eq(node.Inner3.Inner2.Inner.IntVar, int())
    assert_eq(node.Inner3.Inner3.IntVar, 200)
    assert_eq(node.Inner3.Inner3.Inner.IntVar, int())
    
    data_inner.validate_changes("")
    assert_eq(node.Inner1.IntVar, 100)
    assert_eq(node.Inner1.Inner1.IntVar, 200)
    assert_eq(node.Inner1.Inner1.Inner.IntVar, 300)
    assert_eq(node.Inner1.Inner2.IntVar, 200)
    assert_eq(node.Inner1.Inner2.Inner.IntVar, 300)
    assert_eq(node.Inner1.Inner3.IntVar, 200)
    assert_eq(node.Inner1.Inner3.Inner.IntVar, 300)

    
func _get_structure() -> Node:
    var OuterNode_script: Script = get_cs_script("OuterNode.cs")
    var Resource1_script: Script = get_cs_script("Resource1.cs")
    var Resource2_script: Script = get_cs_script("Resource2.cs")
    var Resource3_script: Script = get_cs_script("Resource3.cs")
    var node: Node = autofree(OuterNode_script.new())
    node.Inner1 = Resource1_script.new()
    node.Inner1.Inner1 = Resource2_script.new()
    node.Inner1.Inner1.Inner = Resource3_script.new()
    node.Inner1.Inner2 = Resource2_script.new()
    node.Inner1.Inner2.Inner = Resource3_script.new()
    node.Inner1.Inner3 = Resource2_script.new()
    node.Inner1.Inner3.Inner = Resource3_script.new()
    node.Inner2 = Resource1_script.new()
    node.Inner2.Inner1 = Resource2_script.new()
    node.Inner2.Inner1.Inner = Resource3_script.new()
    node.Inner2.Inner2 = Resource2_script.new()
    node.Inner2.Inner2.Inner = Resource3_script.new()
    node.Inner2.Inner3 = Resource2_script.new()
    node.Inner2.Inner3.Inner = Resource3_script.new()
    node.Inner3 = Resource1_script.new()
    node.Inner3.Inner1 = Resource2_script.new()
    node.Inner3.Inner1.Inner = Resource3_script.new()
    node.Inner3.Inner2 = Resource2_script.new()
    node.Inner3.Inner2.Inner = Resource3_script.new()
    node.Inner3.Inner3 = Resource2_script.new()
    node.Inner3.Inner3.Inner = Resource3_script.new()
    return node
